"""
Диагональная матрица 
Рассчет установившейс вероятности для непрерывных марковских процессов
"""
import numpy as np
import copy
# Вариант 52

#L = int(input("Введите интенсивность поступления требований -> ")) #Лямбда
#u = int(input("Введите интенсивность обслуживания требований одним каналом -> "))
#m = int(input("Количество каналов -> "))
#n = int(input("Количество мест в очереди -> "))

L = 10 # Интенсивность поступлений
m = 7 # количество каналов
u = 1 # интенсивность обслуживания
n = 15 # кол-во в очереди #По заданию знач 15!!!

print("Матрица переходов")
p_matrix = np.zeros((m + n + 1, m + n + 1))
for i in range(m + n): # длина цикла m+n
    p_matrix[i, i+1] = L # диагональ лямбда
    if i < m: # пока есть доступные каналы
        p_matrix[i + 1, i] = (u * (i + 1))
    else: # если все каналы заняты
        p_matrix[i + 1, i] = u*m
    # print(p_matrix[i])

"""Установившаяся вероятность"""

# сумма строк матрицы интенсивности перехода
diag_res = []

# shape[0] длина строки
for i in range(p_matrix.shape[0]):
    # суммируем строки
    diag_res.append(p_matrix[i, :].sum())

# диагональная матрица
D = np.diag(diag_res)
# print("Диагональная матрица\n", D)

# Транспонированная матрица
M = p_matrix.transpose() - D

M_ = copy.deepcopy(M)
M_[-1, :] = 1
print("Заменяем последнюю строку на единицу")
print(M_)


# вектор B 
b_matrix = np.zeros(M_.shape[0])
b_matrix[-1] = 1
print(b_matrix)

# вектор условных вероятностей
X = np.linalg.inv(M_).dot(b_matrix)
print(X)